문제 해결 전략
- 직관
- 체계적인 접근 : 비슷한 문제, 단순화, 수식화, 그림, 분해, 거꾸로, 순서강제, 정규화

좋은 코드
- 간결(전역변수, 매크로)
- 함수로 분리해 재사용
- 표준 라이브러리 사용
- 같은 형태로 코드 작성
- 명료한 명명법
- 자료 정규화
- 코드와 데이터 분리

자주 하는 실수
- 배열 밖 원소 접근
- 일관되지 않은 범위 표현 방식 사용(반 열린 구간, end() : 마지막 다음 원소)
- Off-by-one 오류(하나 차이)
- 상수 오타
- 스택 오버플로
- 다차원 배열 인덱스 순서
- 잘못된 비교 함수
- 최소, 최대 예외 처리
- 연산자 우선순위
- 입출력 방식(cin >> gets())
- 변수 초괴화

디버깅 / 테스트
- 대회 : 눈으로 디버킹
- assertion 사용
- scaffolding

산술 오버플로
- 너무 큰 결과(비트)
- 너무 큰 중간값(비트 초과)
- 너무 큰 무한대(무한대 값 선택)
- 실수 연산 주의

시간 복잡도
- big O notation
- 주먹구구 법칙 : 1초당 반복문 1억 초과? = 시간 제한 초과 가능성

계산 복잡도
- P 문제 : 다항 시간 알고리즘이 존재하는 문제
- NP 문제 : 답이 주어졌을 때 정답인지를 다항 시간 내에 확인 할 수 있는 문제

수학적 귀납법
- 첫 단계 증명 + 귀납 증명(n->n+1)
- 반복문 불변식

귀류법
- 반대 상황을 가정 -> 결론이 잘못됨

비둘기집의 원리

동전 뒤집기

순환소수

구성적 증명
- 실제 답을 제시

안정적 결혼 문제
